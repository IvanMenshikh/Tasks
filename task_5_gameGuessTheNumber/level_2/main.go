package main

import (
	"bufio"
	"fmt"
	"math"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/fatih/color"
)

type level struct {
	levelName   string
	maxAttempts int
	randomNum   int
}

func main() {

	// –¶—ã–µ—Ç–æ–≤—ã–µ –ø–æ–ª–∏—Ç—Ä—ã
	winColor := color.New(color.FgGreen).SprintFunc()
	lossColor := color.New(color.FgRed).SprintFunc()
	attemptsColor := color.New(color.FgYellow).SprintFunc()

	fmt.Println()
	fmt.Println(winColor("–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'"))
	fmt.Println()

	// –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
	levels := []level{
		{levelName: "Easy", maxAttempts: 15, randomNum: RandomNumberGenerator(50)},
		{levelName: "Medium", maxAttempts: 10, randomNum: RandomNumberGenerator(100)},
		{levelName: "Hard", maxAttempts: 5, randomNum: RandomNumberGenerator(200)},
	}

	attempts := 0
	systemReader := bufio.NewReader(os.Stdin) // –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–∏–¥–µ—Ä–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
	listPlayerNum := make([]int, 0)           // –°—Ä–µ–∑ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –∏–≥—Ä–æ–∫–∞
	var selectLevel *level

	fmt.Println("–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
	fmt.Println(" * Easy: 1‚Äì50, 15 –ø–æ–ø—ã—Ç–æ–∫")
	fmt.Println(" * Medium: 1‚Äì100, 10 –ø–æ–ø—ã—Ç–æ–∫")
	fmt.Println(" * Hard: 1‚Äì200, 5 –ø–æ–ø—ã—Ç–æ–∫")
	fmt.Println()
	fmt.Printf("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ")

	inputLevel, _ := systemReader.ReadString('\n')
	inputLevel = strings.TrimSpace(inputLevel)

	for index, _ := range levels {
		if inputLevel == levels[index].levelName {
			selectLevel = &levels[index]
			break
		}
	}

	for selectLevel.maxAttempts > attempts {
		fmt.Printf("–ü–æ–ø—ã—Ç–∫–∞ #%s - –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ", attemptsColor(attempts+1)) // —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1

		input, _ := systemReader.ReadString('\n') // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –¥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ enter
		input = strings.TrimSpace(input)          // —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
		playerNumber, err := strconv.Atoi(input)  // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞. –í–≤–µ–¥–µ–Ω–æ: %s\n", input)
			return
		}

		listPlayerNum = append(listPlayerNum, playerNumber)
		fmt.Println("–¢–≤–æ–∏ —á–∏—Å–ª–∞:", attemptsColor(listPlayerNum))
		attempts++

		switch {
		case selectLevel.randomNum == playerNumber:
			fmt.Println()
			fmt.Println(winColor("–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ! üéâ –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!"))
			fmt.Println()
			return
		case int(math.Abs(float64(selectLevel.randomNum-playerNumber))) <= 5:
			fmt.Println("–ì–æ—Ä—è—á–æ üî•")
			fmt.Println()
		case int(math.Abs(float64(selectLevel.randomNum-playerNumber))) <= 15:
			fmt.Println("–¢–µ–ø–ª–æ üôÇ")
			fmt.Println()
		default:
			fmt.Println("–•–æ–ª–æ–¥–Ω–æ ‚ùÑÔ∏è")
			fmt.Println()
		}

		if attempts == selectLevel.maxAttempts {
			fmt.Print(lossColor("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!üò¢ "))
			fmt.Println(lossColor("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ:"), selectLevel.randomNum)
		}
	}
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞.
func RandomNumberGenerator(numbers int) int {
	rand.Seed(time.Now().UnixNano())
	randomNumber := rand.Intn(numbers) + 1
	return randomNumber
}
