package main

import (
	"fmt"
)

// Нужно вернуть любой массив, содержащий n уникальных целых чисел, сумма которых равна 0.
// Пример 1:
// Ввод:  n = 5
// Вывод: [-7, -1, 1, 3, 4]
// Объяснение: Также правильными ответами будут [-5, -1, 1, 2, 3] или [-3, -1, 2, -2, 4].

// Пример 2:
// Ввод:  n = 3
// Вывод: [-1, 0, 1]

// Пример 3:
// Ввод:  n = 1
// Вывод: [0]

// Ограничения:
// 1 <= n <= 1000

func sumZero(n int) ([]int, error) {
	// Настраиваем ограничение 1 <= n <= 1000
	// Пример 1(ошибка): 0 < 1 (true) или 0 > 1000 (false)
	// Пример 2(ошибка): 1001 < 1 (false) или 1001 > 1000 (true)
	// Пример 3(выполнено): 500 < 1 (false) или 500 > 1000 (false)
	if n < 1 || n > 1000 {
		return nil, fmt.Errorf("n должен быть в диапазоне от 1 до 1000, но получено: %d", n)
	}

	// Срез для хранения результата
	res := make([]int, 0, n)

	// Добавляем числа от 1 до n/2 и их противоположные значения
	for i := 1; i <= n/2; i++ {
		res = append(res, i)
		res = append(res, -i)
	}

	// Если n нечётное, добавляем 0
	if n%2 != 0 {
		res = append(res, 0)
	}

	return res, nil
}

func main() {
	n := 500 // входные данные
	// Проверка на ошибку.
	result, err := sumZero(n)
	if err != nil {
		fmt.Println("Ошибка:", err)
		return
	}
	fmt.Println(result)
}
